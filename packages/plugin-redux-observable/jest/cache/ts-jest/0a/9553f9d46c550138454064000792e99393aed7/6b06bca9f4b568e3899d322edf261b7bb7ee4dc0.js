'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
const redux_observable_1 = require('redux-observable')
const redux_1 = require('redux')
const getDispatchers_1 = require('./utils/getDispatchers')
exports.isActionOf = dispatcher => {
  return (value, index) => {
    return value && dispatcher.type && dispatcher.type === value.type
  }
}
exports.ofType = (...dispatchers) => {
  const types = dispatchers.map(dispatcher => dispatcher.type).filter(type => !!type)
  return redux_observable_1.ofType(...types)
}
const createRematchObservable = ({ epics, models }) => {
  const dispatchers = getDispatchers_1.getDispatchers(models)
  const epic = redux_observable_1.combineEpics(...Object.values(epics))
  const epicMiddleware = redux_observable_1.createEpicMiddleware({ dependencies: { dispatchers } })
  return {
    config: {
      redux: {
        createStore: (reducers, initialState, enhancer) => {
          return redux_1.createStore(
            reducers,
            initialState,
            redux_1.compose(
              redux_1.applyMiddleware(...[epicMiddleware]),
              enhancer,
            ),
          )
        },
      },
    },
    onStoreCreated() {
      epicMiddleware.run(epic)
    },
  }
}
exports.default = createRematchObservable
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3FpZGFudGEvRG9jdW1lbnRzL3BlcnNvbmFsL3JlbWF0Y2gtb2JzZXJ2YWJsZS9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBZ0c7QUFFaEcsaUNBQTJFO0FBRTNFLDJEQUF1RDtBQUUxQyxRQUFBLFVBQVUsR0FBRyxDQUFDLFVBQTRCLEVBQUUsRUFBRTtJQUN6RCxPQUFPLENBQUMsS0FBZ0QsRUFBRSxLQUFhLEVBQUUsRUFBRTtRQUN6RSxPQUFPLEtBQUssSUFBSSxVQUFVLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQTtJQUNuRSxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFWSxRQUFBLE1BQU0sR0FBRyxDQUFDLEdBQUcsV0FBMkQsRUFBRSxFQUFFO0lBQ3ZGLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBRSxVQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1RixPQUFPLHlCQUFTLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQTtBQUM1QixDQUFDLENBQUE7QUFFRCxNQUFNLHVCQUF1QixHQUFHLENBQUMsRUFDL0IsS0FBSyxFQUNMLE1BQU0sR0FJUCxFQUFVLEVBQUU7SUFDWCxNQUFNLFdBQVcsR0FBRywrQkFBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzFDLE1BQU0sSUFBSSxHQUFHLCtCQUFZLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDbEQsTUFBTSxjQUFjLEdBQUcsdUNBQW9CLENBQUMsRUFBRSxZQUFZLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDOUUsT0FBTztRQUNMLE1BQU0sRUFBRTtZQUNOLEtBQUssRUFBRTtnQkFDTCxXQUFXLEVBQUUsQ0FBQyxDQUFDLFFBQWEsRUFBRSxZQUFpQixFQUFFLFFBQWEsRUFBRSxFQUFFO29CQUNoRSxPQUFPLG1CQUFXLENBQ2hCLFFBQVEsRUFDUixZQUFZLEVBQ1osZUFBTyxDQUNMLHVCQUFlLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQ3BDLFFBQVEsQ0FDVCxDQUNGLENBQUE7Z0JBQ0gsQ0FBQyxDQUFpQjthQUNuQjtTQUNGO1FBQ0QsY0FBYztZQUNaLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDMUIsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxrQkFBZSx1QkFBdUIsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvcWlkYW50YS9Eb2N1bWVudHMvcGVyc29uYWwvcmVtYXRjaC1vYnNlcnZhYmxlL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21iaW5lRXBpY3MsIGNyZWF0ZUVwaWNNaWRkbGV3YXJlLCBFcGljLCBvZlR5cGUgYXMgcmR4T2ZUeXBlIH0gZnJvbSAncmVkdXgtb2JzZXJ2YWJsZSdcbmltcG9ydCB7IFBsdWdpbiwgTW9kZWxzLCBSZW1hdGNoRGlzcGF0Y2hlciwgUmVtYXRjaERpc3BhdGNoZXJBc3luYyB9IGZyb20gJ0ByZW1hdGNoL2NvcmUnXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBTdG9yZUNyZWF0b3IgfSBmcm9tICdyZWR1eCdcblxuaW1wb3J0IHsgZ2V0RGlzcGF0Y2hlcnMgfSBmcm9tICcuL3V0aWxzL2dldERpc3BhdGNoZXJzJ1xuXG5leHBvcnQgY29uc3QgaXNBY3Rpb25PZiA9IChkaXNwYXRjaGVyOiB7IHR5cGU6IHN0cmluZyB9KSA9PiB7XG4gIHJldHVybiAodmFsdWU6IHsgdHlwZTogc3RyaW5nOyBwYXlsb2FkOiBhbnk7IG1ldGE6IGFueSB9LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGRpc3BhdGNoZXIudHlwZSAmJiBkaXNwYXRjaGVyLnR5cGUgPT09IHZhbHVlLnR5cGVcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgb2ZUeXBlID0gKC4uLmRpc3BhdGNoZXJzOiAoUmVtYXRjaERpc3BhdGNoZXIgfCBSZW1hdGNoRGlzcGF0Y2hlckFzeW5jKVtdKSA9PiB7XG4gIGNvbnN0IHR5cGVzID0gZGlzcGF0Y2hlcnMubWFwKGRpc3BhdGNoZXIgPT4gKGRpc3BhdGNoZXIgYXMgYW55KS50eXBlKS5maWx0ZXIodHlwZSA9PiAhIXR5cGUpXG4gIHJldHVybiByZHhPZlR5cGUoLi4udHlwZXMpXG59XG5cbmNvbnN0IGNyZWF0ZVJlbWF0Y2hPYnNlcnZhYmxlID0gKHtcbiAgZXBpY3MsXG4gIG1vZGVscyxcbn06IHtcbiAgZXBpY3M6IHsgW2tleTogc3RyaW5nXTogRXBpYyB9XG4gIG1vZGVsczogTW9kZWxzXG59KTogUGx1Z2luID0+IHtcbiAgY29uc3QgZGlzcGF0Y2hlcnMgPSBnZXREaXNwYXRjaGVycyhtb2RlbHMpXG4gIGNvbnN0IGVwaWMgPSBjb21iaW5lRXBpY3MoLi4uT2JqZWN0LnZhbHVlcyhlcGljcykpXG4gIGNvbnN0IGVwaWNNaWRkbGV3YXJlID0gY3JlYXRlRXBpY01pZGRsZXdhcmUoeyBkZXBlbmRlbmNpZXM6IHsgZGlzcGF0Y2hlcnMgfSB9KVxuICByZXR1cm4ge1xuICAgIGNvbmZpZzoge1xuICAgICAgcmVkdXg6IHtcbiAgICAgICAgY3JlYXRlU3RvcmU6ICgocmVkdWNlcnM6IGFueSwgaW5pdGlhbFN0YXRlOiBhbnksIGVuaGFuY2VyOiBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlU3RvcmUoXG4gICAgICAgICAgICByZWR1Y2VycyxcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZSxcbiAgICAgICAgICAgIGNvbXBvc2UoXG4gICAgICAgICAgICAgIGFwcGx5TWlkZGxld2FyZSguLi5bZXBpY01pZGRsZXdhcmVdKSxcbiAgICAgICAgICAgICAgZW5oYW5jZXIsXG4gICAgICAgICAgICApLFxuICAgICAgICAgIClcbiAgICAgICAgfSkgYXMgU3RvcmVDcmVhdG9yLFxuICAgICAgfSxcbiAgICB9LFxuICAgIG9uU3RvcmVDcmVhdGVkKCkge1xuICAgICAgZXBpY01pZGRsZXdhcmUucnVuKGVwaWMpXG4gICAgfSxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSZW1hdGNoT2JzZXJ2YWJsZVxuIl0sInZlcnNpb24iOjN9

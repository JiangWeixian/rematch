'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
const getDispatchers_1 = require('../src/utils/getDispatchers')
const dolphins = {
  state: 1,
  reducers: {
    increment: state => state + 1,
  },
  effects: {
    async incrementAsync() {
      await delay(500)
      this.increment(1)
    },
  },
}
const sharks = {
  state: 0,
  reducers: {
    increment: (state, payload) => state + payload,
  },
  effects: {
    async incrementAsync(payload) {
      await delay(500)
      this.increment(payload || 1)
    },
  },
}
const models = {
  sharks,
  dolphins,
}
const dispatchers = getDispatchers_1.getDispatchers(models)
describe('test utils getDispatchers', () => {
  test('dispatchers has same structure as models', () => {
    expect(Object.keys(dispatchers)).toEqual(['sharks', 'dolphins'])
    expect(Object.keys(dispatchers.sharks)).toEqual(['increment', 'incrementAsync'])
    expect(Object.keys(dispatchers.dolphins)).toEqual(['increment', 'incrementAsync'])
  })
  test('value of dispatchers should be function', () => {
    Object.keys(dispatchers.sharks).forEach(key => {
      expect(typeof dispatchers.sharks[key]).toBe('function')
    })
    Object.keys(dispatchers.dolphins).forEach(key => {
      expect(typeof dispatchers.dolphins[key]).toBe('function')
    })
  })
  test('item in dispatchers has propety type', () => {
    Object.keys(dispatchers.sharks).forEach(key => {
      expect(dispatchers.sharks[key].type).toBe(`sharks/${key}`)
    })
    Object.keys(dispatchers.dolphins).forEach(key => {
      expect(dispatchers.dolphins[key].type).toBe(`dolphins/${key}`)
    })
  })
  test('dispatchers should dispatch original redux action', () => {
    expect(dispatchers.sharks.increment()).toEqual({
      type: 'sharks/increment',
      payload: undefined,
      meta: undefined,
    })
  })
})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3FpZGFudGEvRG9jdW1lbnRzL3BlcnNvbmFsL3JlbWF0Y2gtb2JzZXJ2YWJsZS90ZXN0L2dldERpc3BhdGNoZXJzLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxnRUFBNEQ7QUFFNUQsTUFBTSxRQUFRLEdBQUc7SUFDZixLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRTtRQUNSLFNBQVMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsS0FBSyxDQUFDLGNBQWM7WUFDbEIsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQixDQUFDO0tBQ0Y7Q0FDRixDQUFBO0FBQ0QsTUFBTSxNQUFNLEdBQUc7SUFDYixLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRTtRQUNSLFNBQVMsRUFBRSxDQUFDLEtBQWtCLEVBQUUsT0FBZSxFQUFlLEVBQUUsQ0FBQyxLQUFLLEdBQUcsT0FBTztLQUNqRjtJQUNELE9BQU8sRUFBRTtRQUNQLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBZTtZQUNsQyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUM5QixDQUFDO0tBQ0Y7Q0FDRixDQUFBO0FBRUQsTUFBTSxNQUFNLEdBQUc7SUFDYixNQUFNO0lBQ04sUUFBUTtDQUNULENBQUE7QUFDRCxNQUFNLFdBQVcsR0FBRywrQkFBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRTFDLFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7SUFDekMsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtRQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO1FBQ2hFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUE7UUFDaEYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQTtJQUNwRixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7UUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO2FBQzVCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2YsTUFBTSxDQUFDLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6RCxDQUFDLENBQUMsQ0FBQTtRQUVKLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQzthQUM5QixPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNmLE1BQU0sQ0FBQyxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDM0QsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDaEQsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO2FBQzVCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUM1RCxDQUFDLENBQUMsQ0FBQTtRQUVKLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQzthQUM5QixPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNmLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDaEUsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxtREFBbUQsRUFBRSxHQUFHLEVBQUU7UUFDN0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQTtJQUNuSCxDQUFDLENBQUMsQ0FBQTtBQUVKLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9xaWRhbnRhL0RvY3VtZW50cy9wZXJzb25hbC9yZW1hdGNoLW9ic2VydmFibGUvdGVzdC9nZXREaXNwYXRjaGVycy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldERpc3BhdGNoZXJzIH0gZnJvbSAnLi4vc3JjL3V0aWxzL2dldERpc3BhdGNoZXJzJ1xuXG5jb25zdCBkb2xwaGlucyA9IHtcbiAgc3RhdGU6IDEsXG4gIHJlZHVjZXJzOiB7XG4gICAgaW5jcmVtZW50OiBzdGF0ZSA9PiBzdGF0ZSArIDEsXG4gIH0sXG4gIGVmZmVjdHM6IHtcbiAgICBhc3luYyBpbmNyZW1lbnRBc3luYygpIHtcbiAgICAgIGF3YWl0IGRlbGF5KDUwMClcbiAgICAgIHRoaXMuaW5jcmVtZW50KDEpXG4gICAgfSxcbiAgfSxcbn1cbmNvbnN0IHNoYXJrcyA9IHtcbiAgc3RhdGU6IDAsXG4gIHJlZHVjZXJzOiB7XG4gICAgaW5jcmVtZW50OiAoc3RhdGU6IFNoYXJrc1N0YXRlLCBwYXlsb2FkOiBudW1iZXIpOiBTaGFya3NTdGF0ZSA9PiBzdGF0ZSArIHBheWxvYWQsXG4gIH0sXG4gIGVmZmVjdHM6IHtcbiAgICBhc3luYyBpbmNyZW1lbnRBc3luYyhwYXlsb2FkOiBudW1iZXIpIHtcbiAgICAgIGF3YWl0IGRlbGF5KDUwMClcbiAgICAgIHRoaXMuaW5jcmVtZW50KHBheWxvYWQgfHwgMSlcbiAgICB9LFxuICB9LFxufVxuXG5jb25zdCBtb2RlbHMgPSB7XG4gIHNoYXJrcyxcbiAgZG9scGhpbnMsXG59XG5jb25zdCBkaXNwYXRjaGVycyA9IGdldERpc3BhdGNoZXJzKG1vZGVscylcblxuZGVzY3JpYmUoJ3Rlc3QgdXRpbHMgZ2V0RGlzcGF0Y2hlcnMnLCAoKSA9PiB7XG4gIHRlc3QoJ2Rpc3BhdGNoZXJzIGhhcyBzYW1lIHN0cnVjdHVyZSBhcyBtb2RlbHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KE9iamVjdC5rZXlzKGRpc3BhdGNoZXJzKSkudG9FcXVhbChbJ3NoYXJrcycsICdkb2xwaGlucyddKVxuICAgIGV4cGVjdChPYmplY3Qua2V5cyhkaXNwYXRjaGVycy5zaGFya3MpKS50b0VxdWFsKFsnaW5jcmVtZW50JywgJ2luY3JlbWVudEFzeW5jJ10pXG4gICAgZXhwZWN0KE9iamVjdC5rZXlzKGRpc3BhdGNoZXJzLmRvbHBoaW5zKSkudG9FcXVhbChbJ2luY3JlbWVudCcsICdpbmNyZW1lbnRBc3luYyddKVxuICB9KVxuXG4gIHRlc3QoJ3ZhbHVlIG9mIGRpc3BhdGNoZXJzIHNob3VsZCBiZSBmdW5jdGlvbicsICgpID0+IHtcbiAgICBPYmplY3Qua2V5cyhkaXNwYXRjaGVycy5zaGFya3MpXG4gICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGV4cGVjdCh0eXBlb2YgZGlzcGF0Y2hlcnMuc2hhcmtzW2tleV0pLnRvQmUoJ2Z1bmN0aW9uJylcbiAgICAgIH0pXG5cbiAgICBPYmplY3Qua2V5cyhkaXNwYXRjaGVycy5kb2xwaGlucylcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBkaXNwYXRjaGVycy5kb2xwaGluc1trZXldKS50b0JlKCdmdW5jdGlvbicpXG4gICAgICB9KVxuICB9KVxuXG4gIHRlc3QoJ2l0ZW0gaW4gZGlzcGF0Y2hlcnMgaGFzIHByb3BldHkgdHlwZScsICgpID0+IHtcbiAgICBPYmplY3Qua2V5cyhkaXNwYXRjaGVycy5zaGFya3MpXG4gICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGV4cGVjdChkaXNwYXRjaGVycy5zaGFya3Nba2V5XS50eXBlKS50b0JlKGBzaGFya3MvJHtrZXl9YClcbiAgICAgIH0pXG5cbiAgICBPYmplY3Qua2V5cyhkaXNwYXRjaGVycy5kb2xwaGlucylcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgZXhwZWN0KGRpc3BhdGNoZXJzLmRvbHBoaW5zW2tleV0udHlwZSkudG9CZShgZG9scGhpbnMvJHtrZXl9YClcbiAgICAgIH0pXG4gIH0pXG5cbiAgdGVzdCgnZGlzcGF0Y2hlcnMgc2hvdWxkIGRpc3BhdGNoIG9yaWdpbmFsIHJlZHV4IGFjdGlvbicsICgpID0+IHtcbiAgICBleHBlY3QoZGlzcGF0Y2hlcnMuc2hhcmtzLmluY3JlbWVudCgpKS50b0VxdWFsKHsgdHlwZTogJ3NoYXJrcy9pbmNyZW1lbnQnLCBwYXlsb2FkOiB1bmRlZmluZWQsIG1ldGE6IHVuZGVmaW5lZCB9KVxuICB9KVxuXG59KVxuIl0sInZlcnNpb24iOjN9

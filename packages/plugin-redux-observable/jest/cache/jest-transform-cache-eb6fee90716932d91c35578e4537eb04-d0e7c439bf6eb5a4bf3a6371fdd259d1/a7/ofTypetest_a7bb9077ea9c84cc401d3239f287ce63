e4ded67db5961cb92e6bd49d02fcf507
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const rxjs_1 = require("rxjs");
const getDispatchers_1 = require("../src/utils/getDispatchers");
const utils_1 = require("./utils");
const models = {
    sharks: utils_1.sharks,
    dolphins: utils_1.dolphins,
};
const dispatchers = getDispatchers_1.getDispatchers(models);
describe('ofType', () => {
    test('should filter by action type', () => {
        let actions = new rxjs_1.Subject();
        let lulz = [];
        actions.pipe(src_1.ofType(dispatchers.sharks.increment)).subscribe(x => lulz.push(x));
        actions.next(dispatchers.sharks.increment(1));
        expect(lulz).toEqual([{ type: 'sharks/increment', payload: 1 }]);
    });
    test('should filter by multiple types', () => {
        let actions = new rxjs_1.Subject();
        let lulz = [];
        actions.pipe(src_1.ofType(dispatchers.sharks.increment, dispatchers.dolphins.increment)).subscribe(x => lulz.push(x));
        actions.next(dispatchers.sharks.increment(1));
        expect(lulz).toEqual([{ type: 'sharks/increment', payload: 1 }]);
        actions.next(dispatchers.dolphins.increment());
        expect(lulz).toEqual([{ type: 'sharks/increment', payload: 1 }, { type: 'dolphins/increment' }]);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3FpZGFudGEvRG9jdW1lbnRzL3BlcnNvbmFsL3JlbWF0Y2gtb2JzZXJ2YWJsZS90ZXN0L29mVHlwZS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQStCO0FBQy9CLCtCQUE4QjtBQUM5QixnRUFBNEQ7QUFDNUQsbUNBQTBDO0FBRTFDLE1BQU0sTUFBTSxHQUFHO0lBQ2IsTUFBTSxFQUFOLGNBQU07SUFDTixRQUFRLEVBQVIsZ0JBQVE7Q0FDVCxDQUFBO0FBRUQsTUFBTSxXQUFXLEdBQUcsK0JBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUUxQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtJQUN0QixJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLElBQUksT0FBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUE7UUFDM0IsSUFBSSxJQUFJLEdBQVUsRUFBRSxDQUFBO1FBRXBCLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdEYsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xFLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUMzQyxJQUFJLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBQzNCLElBQUksSUFBSSxHQUFVLEVBQUUsQ0FBQTtRQUVwQixPQUFPLENBQUMsSUFBSSxDQUFDLFlBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBUSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RILE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNoRSxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQTtRQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xHLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3FpZGFudGEvRG9jdW1lbnRzL3BlcnNvbmFsL3JlbWF0Y2gtb2JzZXJ2YWJsZS90ZXN0L29mVHlwZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9mVHlwZSB9IGZyb20gJy4uL3NyYydcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgZ2V0RGlzcGF0Y2hlcnMgfSBmcm9tICcuLi9zcmMvdXRpbHMvZ2V0RGlzcGF0Y2hlcnMnXG5pbXBvcnQgeyBzaGFya3MsIGRvbHBoaW5zIH0gZnJvbSAnLi91dGlscydcblxuY29uc3QgbW9kZWxzID0ge1xuICBzaGFya3MsXG4gIGRvbHBoaW5zLFxufVxuXG5jb25zdCBkaXNwYXRjaGVycyA9IGdldERpc3BhdGNoZXJzKG1vZGVscylcblxuZGVzY3JpYmUoJ29mVHlwZScsICgpID0+IHtcbiAgdGVzdCgnc2hvdWxkIGZpbHRlciBieSBhY3Rpb24gdHlwZScsICgpID0+IHtcbiAgICBsZXQgYWN0aW9ucyA9IG5ldyBTdWJqZWN0KClcbiAgICBsZXQgbHVsejogYW55W10gPSBbXVxuXG4gICAgYWN0aW9ucy5waXBlKG9mVHlwZShkaXNwYXRjaGVycy5zaGFya3MuaW5jcmVtZW50KSBhcyBhbnkpLnN1YnNjcmliZSh4ID0+IGx1bHoucHVzaCh4KSlcbiAgICBhY3Rpb25zLm5leHQoZGlzcGF0Y2hlcnMuc2hhcmtzLmluY3JlbWVudCgxKSlcbiAgICBleHBlY3QobHVseikudG9FcXVhbChbeyB0eXBlOiAnc2hhcmtzL2luY3JlbWVudCcsIHBheWxvYWQ6IDEgfV0pXG4gIH0pXG5cbiAgdGVzdCgnc2hvdWxkIGZpbHRlciBieSBtdWx0aXBsZSB0eXBlcycsICgpID0+IHtcbiAgICBsZXQgYWN0aW9ucyA9IG5ldyBTdWJqZWN0KClcbiAgICBsZXQgbHVsejogYW55W10gPSBbXVxuXG4gICAgYWN0aW9ucy5waXBlKG9mVHlwZShkaXNwYXRjaGVycy5zaGFya3MuaW5jcmVtZW50LCBkaXNwYXRjaGVycy5kb2xwaGlucy5pbmNyZW1lbnQpIGFzIGFueSkuc3Vic2NyaWJlKHggPT4gbHVsei5wdXNoKHgpKVxuICAgIGFjdGlvbnMubmV4dChkaXNwYXRjaGVycy5zaGFya3MuaW5jcmVtZW50KDEpKVxuICAgIGV4cGVjdChsdWx6KS50b0VxdWFsKFt7IHR5cGU6ICdzaGFya3MvaW5jcmVtZW50JywgcGF5bG9hZDogMSB9XSlcbiAgICBhY3Rpb25zLm5leHQoZGlzcGF0Y2hlcnMuZG9scGhpbnMuaW5jcmVtZW50KCkpXG4gICAgZXhwZWN0KGx1bHopLnRvRXF1YWwoW3sgdHlwZTogJ3NoYXJrcy9pbmNyZW1lbnQnLCBwYXlsb2FkOiAxIH0sIHsgdHlwZTogJ2RvbHBoaW5zL2luY3JlbWVudCcgfV0pXG4gIH0pXG59KVxuIl0sInZlcnNpb24iOjN9
{"file":"/Users/qidanta/Documents/personal/rematch-observable/src/utils/getDispatchers.ts","mappings":";;AAEa,QAAA,cAAc,GAAG,CAAC,MAAc,EAAO,EAAE;IACpD,MAAM,WAAW,GAAG,EAAE,CAAA;IACtB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAChC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;QACzB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;YACrB,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;SACtB;QACD,IAAI,KAAK,CAAC,QAAQ,EAAE;YAClB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC/C,MAAM,UAAU,GAAG,GAAG,GAAG,IAAI,UAAU,EAAE,CAAA;gBACzC,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,OAAY,EAAE,IAAS,EAAE,EAAE;oBACzD,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,CAAA;gBAC5C,CAAC,CAAA;gBACD,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,GAAG,UAAU,CAAA;YAChD,CAAC,CAAC,CAAA;SACH;QACD,IAAI,KAAK,CAAC,OAAO,EAAE;YACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAC7C,MAAM,UAAU,GAAG,GAAG,GAAG,IAAI,SAAS,EAAE,CAAA;gBACxC,WAAW,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAY,EAAE,IAAS,EAAE,EAAE;oBACxD,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,CAAA;gBAC5C,CAAC,CAAA;gBACD,WAAW,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,GAAG,UAAU,CAAA;YAC/C,CAAC,CAAC,CAAA;SACH;IACH,CAAC,CAAC,CAAA;IACF,OAAO,WAAW,CAAA;AACpB,CAAC,CAAA","names":[],"sources":["/Users/qidanta/Documents/personal/rematch-observable/src/utils/getDispatchers.ts"],"sourcesContent":["import { Models } from '@rematch/core'\n\nexport const getDispatchers = (models: Models): any => {\n  const dispatchers = {}\n  Object.keys(models).forEach(key => {\n    const model = models[key]\n    if (!dispatchers[key]) {\n      dispatchers[key] = {}\n    }\n    if (model.reducers) {\n      Object.keys(model.reducers).forEach(reducerKey => {\n        const actionType = `${key}/${reducerKey}`\n        dispatchers[key][reducerKey] = (payload: any, meta: any) => {\n          return { type: actionType, payload, meta }\n        }\n        dispatchers[key][reducerKey].type = actionType\n      })\n    }\n    if (model.effects) {\n      Object.keys(model.effects).forEach(effectKey => {\n        const actionType = `${key}/${effectKey}`\n        dispatchers[key][effectKey] = (payload: any, meta: any) => {\n          return { type: actionType, payload, meta }\n        }\n        dispatchers[key][effectKey].type = actionType\n      })\n    }\n  })\n  return dispatchers\n}\n"],"version":3}
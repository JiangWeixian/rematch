{"file":"/Users/qidanta/Documents/personal/rematch-observable/test/rematch-observable.test.ts","mappings":";;;AAAA,wCAAoC;AACpC,8CAAsC;AACtC,sDAAwD;AACxD,mCAAiD;AAEjD,MAAM,UAAU,GAAG,CACjB,OAAO,EACP,MAAM,EACN,EAAE,WAAW,EAAE,EACf,EAAE;IACF,OAAO,OAAO,CAAC,IAAI,CACjB,YAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,EAAE,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,EAC3E,iBAAK,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CACvC,CAAA;AACH,CAAC,CAAA;AAED,MAAM,MAAM,GAAG;IACb,MAAM,EAAN,cAAM;IACN,QAAQ,EAAR,gBAAQ;CACT,CAAA;AAGD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACrD,MAAM,iBAAiB,GAAG,aAAuB,CAAC,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;QACpF,MAAM,KAAK,GAAG,WAAI,CAAC;YACjB,MAAM;YACN,OAAO,EAAE,CAAC,iBAAiB,CAAC;SAC7B,CAAC,CAAA;QACF,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAA;QACnC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC;YAC/B,MAAM,EAAE,CAAC;YACT,QAAQ,EAAE,CAAC;SACZ,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,iBAAiB,GAAG,aAAuB,CAAC,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;QACpF,MAAM,KAAK,GAAG,WAAI,CAAC;YACjB,MAAM;YACN,OAAO,EAAE,CAAC,iBAAiB,CAAC;SAC7B,CAAC,CAAA;QACF,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAA;QACxC,MAAM,aAAK,CAAC,IAAI,CAAC,CAAA;QACjB,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC;YAC/B,MAAM,EAAE,CAAC;YACT,QAAQ,EAAE,CAAC;SACZ,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/Users/qidanta/Documents/personal/rematch-observable/test/rematch-observable.test.ts"],"sourcesContent":["import { init } from '@rematch/core'\nimport { mapTo } from 'rxjs/operators'\nimport createRematchObservable, { ofType } from '../src'\nimport { sharks, dolphins, delay } from './utils'\n\nconst sharkEpics = (\n  action$,\n  state$,\n  { dispatchers },\n) => {\n  return action$.pipe(\n    ofType(dispatchers.dolphins.increment, dispatchers.dolphins.incrementAsync),\n    mapTo(dispatchers.sharks.increment(1)),\n  )\n}\n\nconst models = {\n  sharks,\n  dolphins,\n}\n\n\ndescribe('rematch observable', () => {\n  test('rematch observable listen normal dispatch', () => {\n    const rematchObservable = createRematchObservable({ epics: { sharkEpics }, models })\n    const store = init({\n      models,\n      plugins: [rematchObservable],\n    })\n    store.dispatch.dolphins.increment()\n    expect(store.getState()).toEqual({\n      sharks: 1,\n      dolphins: 2,\n    })\n  })\n\n  test('rematch observable listen effect dispatch', async () => {\n    const rematchObservable = createRematchObservable({ epics: { sharkEpics }, models })\n    const store = init({\n      models,\n      plugins: [rematchObservable],\n    })\n    store.dispatch.dolphins.incrementAsync()\n    await delay(1000)\n    expect(store.getState()).toEqual({\n      sharks: 2,\n      dolphins: 2,\n    })\n  })\n})\n"],"version":3}
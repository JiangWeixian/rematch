{"file":"/Users/qidanta/Documents/personal/rematch-observable/src/index.ts","mappings":";;AAAA,uDAAgG;AAEhG,iCAA2E;AAE3E,2DAAuD;AAE1C,QAAA,UAAU,GAAG,CAAC,UAA4B,EAAE,EAAE;IACzD,OAAO,CAAC,KAAgD,EAAE,KAAa,EAAE,EAAE;QACzE,OAAO,KAAK,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAA;IACnE,CAAC,CAAA;AACH,CAAC,CAAA;AAEY,QAAA,MAAM,GAAG,CAAC,GAAG,WAA2D,EAAE,EAAE;IACvF,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAE,UAAkB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;IAC5F,OAAO,yBAAS,CAAC,GAAG,KAAK,CAAC,CAAA;AAC5B,CAAC,CAAA;AAED,MAAM,uBAAuB,GAAG,CAAC,EAC/B,KAAK,EACL,MAAM,GAIP,EAAU,EAAE;IACX,MAAM,WAAW,GAAG,+BAAc,CAAC,MAAM,CAAC,CAAA;IAC1C,MAAM,IAAI,GAAG,+BAAY,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;IAClD,MAAM,cAAc,GAAG,uCAAoB,CAAC,EAAE,YAAY,EAAE,EAAE,WAAW,EAAE,EAAE,CAAC,CAAA;IAC9E,OAAO;QACL,MAAM,EAAE;YACN,KAAK,EAAE;gBACL,WAAW,EAAE,CAAC,CAAC,QAAa,EAAE,YAAiB,EAAE,QAAa,EAAE,EAAE;oBAChE,OAAO,mBAAW,CAChB,QAAQ,EACR,YAAY,EACZ,eAAO,CACL,uBAAe,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EACpC,QAAQ,CACT,CACF,CAAA;gBACH,CAAC,CAAiB;aACnB;SACF;QACD,cAAc;YACZ,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAC1B,CAAC;KACF,CAAA;AACH,CAAC,CAAA;AAED,kBAAe,uBAAuB,CAAA","names":[],"sources":["/Users/qidanta/Documents/personal/rematch-observable/src/index.ts"],"sourcesContent":["import { combineEpics, createEpicMiddleware, Epic, ofType as rdxOfType } from 'redux-observable'\nimport { Plugin, Models, RematchDispatcher, RematchDispatcherAsync } from '@rematch/core'\nimport { createStore, applyMiddleware, compose, StoreCreator } from 'redux'\n\nimport { getDispatchers } from './utils/getDispatchers'\n\nexport const isActionOf = (dispatcher: { type: string }) => {\n  return (value: { type: string; payload: any; meta: any }, index: number) => {\n    return value && dispatcher.type && dispatcher.type === value.type\n  }\n}\n\nexport const ofType = (...dispatchers: (RematchDispatcher | RematchDispatcherAsync)[]) => {\n  const types = dispatchers.map(dispatcher => (dispatcher as any).type).filter(type => !!type)\n  return rdxOfType(...types)\n}\n\nconst createRematchObservable = ({\n  epics,\n  models,\n}: {\n  epics: { [key: string]: Epic }\n  models: Models\n}): Plugin => {\n  const dispatchers = getDispatchers(models)\n  const epic = combineEpics(...Object.values(epics))\n  const epicMiddleware = createEpicMiddleware({ dependencies: { dispatchers } })\n  return {\n    config: {\n      redux: {\n        createStore: ((reducers: any, initialState: any, enhancer: any) => {\n          return createStore(\n            reducers,\n            initialState,\n            compose(\n              applyMiddleware(...[epicMiddleware]),\n              enhancer,\n            ),\n          )\n        }) as StoreCreator,\n      },\n    },\n    onStoreCreated() {\n      epicMiddleware.run(epic)\n    },\n  }\n}\n\nexport default createRematchObservable\n"],"version":3}
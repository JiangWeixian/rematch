dda97e772252e10cc637d46007e320da
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getDispatchers_1 = require("../src/utils/getDispatchers");
const dolphins = {
    state: 1,
    reducers: {
        increment: state => state + 1,
    },
    effects: {
        async incrementAsync() {
            await delay(500);
            this.increment(1);
        },
    },
};
const sharks = {
    state: 0,
    reducers: {
        increment: (state, payload) => state + payload,
    },
    effects: {
        async incrementAsync(payload) {
            await delay(500);
            this.increment(payload || 1);
        },
    },
};
const models = {
    sharks,
    dolphins,
};
const dispatchers = getDispatchers_1.getDispatchers(models);
describe('test utils getDispatchers', () => {
    test('dispatchers has same structure as models', () => {
        expect(Object.keys(dispatchers)).toEqual(['sharks', 'dolphins']);
        expect(Object.keys(dispatchers.sharks)).toEqual(['increment', 'incrementAsync']);
        expect(Object.keys(dispatchers.dolphins)).toEqual(['increment', 'incrementAsync']);
    });
    test('value of dispatchers should be function', () => {
        Object.keys(dispatchers.sharks)
            .forEach((key) => {
            expect(typeof dispatchers.sharks[key]).toBe('function');
        });
        Object.keys(dispatchers.dolphins)
            .forEach((key) => {
            expect(typeof dispatchers.dolphins[key]).toBe('function');
        });
    });
    test('item in dispatchers has propety type', () => {
        Object.keys(dispatchers.sharks)
            .forEach((key) => {
            expect(dispatchers.sharks[key].type).toBe(`sharks/${key}`);
        });
        Object.keys(dispatchers.dolphins)
            .forEach((key) => {
            expect(dispatchers.dolphins[key]).toBe(`dolphins/${key}`);
        });
    });
    test('dispatchers should dispatch original redux action', () => {
        expect(dispatchers.sharks.increment()).toEqual({ type: 'sharks/increment', payload: undefined, meta: undefined });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3FpZGFudGEvRG9jdW1lbnRzL3BlcnNvbmFsL3JlbWF0Y2gtb2JzZXJ2YWJsZS90ZXN0L2dldERpc3BhdGNoZXJzLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxnRUFBNEQ7QUFFNUQsTUFBTSxRQUFRLEdBQUc7SUFDZixLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRTtRQUNSLFNBQVMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsS0FBSyxDQUFDLGNBQWM7WUFDbEIsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQixDQUFDO0tBQ0Y7Q0FDRixDQUFBO0FBQ0QsTUFBTSxNQUFNLEdBQUc7SUFDYixLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRTtRQUNSLFNBQVMsRUFBRSxDQUFDLEtBQWtCLEVBQUUsT0FBZSxFQUFlLEVBQUUsQ0FBQyxLQUFLLEdBQUcsT0FBTztLQUNqRjtJQUNELE9BQU8sRUFBRTtRQUNQLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBZTtZQUNsQyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUM5QixDQUFDO0tBQ0Y7Q0FDRixDQUFBO0FBRUQsTUFBTSxNQUFNLEdBQUc7SUFDYixNQUFNO0lBQ04sUUFBUTtDQUNULENBQUE7QUFDRCxNQUFNLFdBQVcsR0FBRywrQkFBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRTFDLFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7SUFDekMsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtRQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO1FBQ2hFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUE7UUFDaEYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQTtJQUNwRixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7UUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO2FBQzVCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2YsTUFBTSxDQUFDLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6RCxDQUFDLENBQUMsQ0FBQTtRQUVKLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQzthQUM5QixPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNmLE1BQU0sQ0FBQyxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDM0QsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDaEQsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO2FBQzVCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUM1RCxDQUFDLENBQUMsQ0FBQTtRQUVKLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQzthQUM5QixPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNmLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUMzRCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtRQUM3RCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFBO0lBQ25ILENBQUMsQ0FBQyxDQUFBO0FBRUosQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3FpZGFudGEvRG9jdW1lbnRzL3BlcnNvbmFsL3JlbWF0Y2gtb2JzZXJ2YWJsZS90ZXN0L2dldERpc3BhdGNoZXJzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RGlzcGF0Y2hlcnMgfSBmcm9tICcuLi9zcmMvdXRpbHMvZ2V0RGlzcGF0Y2hlcnMnXG5cbmNvbnN0IGRvbHBoaW5zID0ge1xuICBzdGF0ZTogMSxcbiAgcmVkdWNlcnM6IHtcbiAgICBpbmNyZW1lbnQ6IHN0YXRlID0+IHN0YXRlICsgMSxcbiAgfSxcbiAgZWZmZWN0czoge1xuICAgIGFzeW5jIGluY3JlbWVudEFzeW5jKCkge1xuICAgICAgYXdhaXQgZGVsYXkoNTAwKVxuICAgICAgdGhpcy5pbmNyZW1lbnQoMSlcbiAgICB9LFxuICB9LFxufVxuY29uc3Qgc2hhcmtzID0ge1xuICBzdGF0ZTogMCxcbiAgcmVkdWNlcnM6IHtcbiAgICBpbmNyZW1lbnQ6IChzdGF0ZTogU2hhcmtzU3RhdGUsIHBheWxvYWQ6IG51bWJlcik6IFNoYXJrc1N0YXRlID0+IHN0YXRlICsgcGF5bG9hZCxcbiAgfSxcbiAgZWZmZWN0czoge1xuICAgIGFzeW5jIGluY3JlbWVudEFzeW5jKHBheWxvYWQ6IG51bWJlcikge1xuICAgICAgYXdhaXQgZGVsYXkoNTAwKVxuICAgICAgdGhpcy5pbmNyZW1lbnQocGF5bG9hZCB8fCAxKVxuICAgIH0sXG4gIH0sXG59XG5cbmNvbnN0IG1vZGVscyA9IHtcbiAgc2hhcmtzLFxuICBkb2xwaGlucyxcbn1cbmNvbnN0IGRpc3BhdGNoZXJzID0gZ2V0RGlzcGF0Y2hlcnMobW9kZWxzKVxuXG5kZXNjcmliZSgndGVzdCB1dGlscyBnZXREaXNwYXRjaGVycycsICgpID0+IHtcbiAgdGVzdCgnZGlzcGF0Y2hlcnMgaGFzIHNhbWUgc3RydWN0dXJlIGFzIG1vZGVscycsICgpID0+IHtcbiAgICBleHBlY3QoT2JqZWN0LmtleXMoZGlzcGF0Y2hlcnMpKS50b0VxdWFsKFsnc2hhcmtzJywgJ2RvbHBoaW5zJ10pXG4gICAgZXhwZWN0KE9iamVjdC5rZXlzKGRpc3BhdGNoZXJzLnNoYXJrcykpLnRvRXF1YWwoWydpbmNyZW1lbnQnLCAnaW5jcmVtZW50QXN5bmMnXSlcbiAgICBleHBlY3QoT2JqZWN0LmtleXMoZGlzcGF0Y2hlcnMuZG9scGhpbnMpKS50b0VxdWFsKFsnaW5jcmVtZW50JywgJ2luY3JlbWVudEFzeW5jJ10pXG4gIH0pXG5cbiAgdGVzdCgndmFsdWUgb2YgZGlzcGF0Y2hlcnMgc2hvdWxkIGJlIGZ1bmN0aW9uJywgKCkgPT4ge1xuICAgIE9iamVjdC5rZXlzKGRpc3BhdGNoZXJzLnNoYXJrcylcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBkaXNwYXRjaGVycy5zaGFya3Nba2V5XSkudG9CZSgnZnVuY3Rpb24nKVxuICAgICAgfSlcblxuICAgIE9iamVjdC5rZXlzKGRpc3BhdGNoZXJzLmRvbHBoaW5zKVxuICAgICAgLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBleHBlY3QodHlwZW9mIGRpc3BhdGNoZXJzLmRvbHBoaW5zW2tleV0pLnRvQmUoJ2Z1bmN0aW9uJylcbiAgICAgIH0pXG4gIH0pXG5cbiAgdGVzdCgnaXRlbSBpbiBkaXNwYXRjaGVycyBoYXMgcHJvcGV0eSB0eXBlJywgKCkgPT4ge1xuICAgIE9iamVjdC5rZXlzKGRpc3BhdGNoZXJzLnNoYXJrcylcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgZXhwZWN0KGRpc3BhdGNoZXJzLnNoYXJrc1trZXldLnR5cGUpLnRvQmUoYHNoYXJrcy8ke2tleX1gKVxuICAgICAgfSlcblxuICAgIE9iamVjdC5rZXlzKGRpc3BhdGNoZXJzLmRvbHBoaW5zKVxuICAgICAgLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBleHBlY3QoZGlzcGF0Y2hlcnMuZG9scGhpbnNba2V5XSkudG9CZShgZG9scGhpbnMvJHtrZXl9YClcbiAgICAgIH0pXG4gIH0pXG5cbiAgdGVzdCgnZGlzcGF0Y2hlcnMgc2hvdWxkIGRpc3BhdGNoIG9yaWdpbmFsIHJlZHV4IGFjdGlvbicsICgpID0+IHtcbiAgICBleHBlY3QoZGlzcGF0Y2hlcnMuc2hhcmtzLmluY3JlbWVudCgpKS50b0VxdWFsKHsgdHlwZTogJ3NoYXJrcy9pbmNyZW1lbnQnLCBwYXlsb2FkOiB1bmRlZmluZWQsIG1ldGE6IHVuZGVmaW5lZCB9KVxuICB9KVxuXG59KVxuIl0sInZlcnNpb24iOjN9
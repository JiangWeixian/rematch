{"file":"/Users/qidanta/Documents/personal/rematch-observable/test/getDispatchers.test.ts","mappings":";;AAAA,gEAA4D;AAC5D,mCAA0C;AAE1C,MAAM,MAAM,GAAG;IACb,MAAM,EAAN,cAAM;IACN,QAAQ,EAAR,gBAAQ;CACT,CAAA;AAED,MAAM,WAAW,GAAG,+BAAc,CAAC,MAAM,CAAC,CAAA;AAE1C,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACpD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAA;QAChE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC,CAAA;QAChF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC,CAAA;IACpF,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACnD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;aAC5B,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,MAAM,CAAC,OAAO,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;QAEJ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aAC9B,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,MAAM,CAAC,OAAO,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAC3D,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAChD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;aAC5B,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,CAAA;QAC5D,CAAC,CAAC,CAAA;QAEJ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aAC9B,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,CAAA;QAChE,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC7D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAA;IACnH,CAAC,CAAC,CAAA;AAEJ,CAAC,CAAC,CAAA","names":[],"sources":["/Users/qidanta/Documents/personal/rematch-observable/test/getDispatchers.test.ts"],"sourcesContent":["import { getDispatchers } from '../src/utils/getDispatchers'\nimport { sharks, dolphins } from './utils'\n\nconst models = {\n  sharks,\n  dolphins,\n}\n\nconst dispatchers = getDispatchers(models)\n\ndescribe('test utils getDispatchers', () => {\n  test('dispatchers has same structure as models', () => {\n    expect(Object.keys(dispatchers)).toEqual(['sharks', 'dolphins'])\n    expect(Object.keys(dispatchers.sharks)).toEqual(['increment', 'incrementAsync'])\n    expect(Object.keys(dispatchers.dolphins)).toEqual(['increment', 'incrementAsync'])\n  })\n\n  test('value of dispatchers should be function', () => {\n    Object.keys(dispatchers.sharks)\n      .forEach((key) => {\n        expect(typeof dispatchers.sharks[key]).toBe('function')\n      })\n\n    Object.keys(dispatchers.dolphins)\n      .forEach((key) => {\n        expect(typeof dispatchers.dolphins[key]).toBe('function')\n      })\n  })\n\n  test('item in dispatchers has propety type', () => {\n    Object.keys(dispatchers.sharks)\n      .forEach((key) => {\n        expect(dispatchers.sharks[key].type).toBe(`sharks/${key}`)\n      })\n\n    Object.keys(dispatchers.dolphins)\n      .forEach((key) => {\n        expect(dispatchers.dolphins[key].type).toBe(`dolphins/${key}`)\n      })\n  })\n\n  test('dispatchers should dispatch original redux action', () => {\n    expect(dispatchers.sharks.increment()).toEqual({ type: 'sharks/increment', payload: undefined, meta: undefined })\n  })\n\n})\n"],"version":3}